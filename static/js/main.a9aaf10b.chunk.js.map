{"version":3,"sources":["components/Wrapper/index.js","components/Img/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Img","role","onClick","handleIncrement","id","alt","name","src","image","App","state","imgs","clicked","count","_this","includes","setState","shuffle","concat","Object","toConsumableArray","console","log","i","length","randNum","Math","floor","random","temp","this","imgsData","_this2","components_Wrapper","map","components_Img","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"svEAOeA,MAJf,SAAiBC,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCc5BC,MAff,SAAaN,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKI,KAAK,MAAMH,UAAU,cAC1BH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAIR,EAAMS,gBAAgBT,EAAMU,MAC/CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,oBC4D5BC,6MA7DbC,MAAQ,CACNC,KAAM,GACNC,QAAS,GACTC,MAAO,KAOTV,gBAAkB,SAACC,GACbU,EAAKJ,MAAME,QAAQG,SAASX,GAC9BU,EAAKE,SAAS,CACZH,MAAO,EACPF,KAAMG,EAAKG,QAAQH,EAAKJ,MAAMC,MAC9BC,QAAS,KAKXE,EAAKE,SAAS,CACZH,MAAOC,EAAKJ,MAAMG,MAAQ,EAC1BF,KAAMG,EAAKG,QAAQH,EAAKJ,MAAMC,MAC9BC,QAAO,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAML,EAAKJ,MAAME,SAAjB,CAAyBR,KAC/B,kBAAKiB,QAAQC,IAAIR,EAAKJ,MAAMG,YAQnCI,QAAU,SAACN,GACT,IAAI,IAAIY,EAAI,EAAGA,EAAIZ,EAAKa,OAAQD,IAAI,CAClC,IAAME,EAAUC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAKa,QAC1CK,EAAOlB,EAAKY,GAClBZ,EAAKY,GAAKZ,EAAKc,GACfd,EAAKc,GAAWI,EAElB,OAAOlB,sFAhCPmB,KAAKd,SAAS,CAAEL,KAAMoB,qCAmCf,IAAAC,EAAAF,KACP,OACEnC,EAAAC,EAAAC,cAACoC,EAAD,KACGH,KAAKpB,MAAMC,KAAKuB,IAAI,SAAAvB,GAEnB,OACEhB,EAAAC,EAAAC,cAACsC,EAAD,CACEhC,gBAAiB6B,EAAK7B,gBACtBiC,IAAKzB,EAAKP,GACVA,GAAIO,EAAKP,GACTE,KAAMK,EAAKL,KACXE,MAAOG,EAAKH,kBAvDR6B,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9aaf10b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./wrapper.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Img(props) {\n  return (\n    <div role=\"img\" className=\"click-item\">\n    <button onClick={()=>props.handleIncrement(props.id)}>\n      <div className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image} />\n        </div>\n      </div>\n      </button>\n    </div>\n  )\n}\n\n\nexport default Img;","import React from 'react';\nimport Wrapper from \"./components/Wrapper\"\nimport Img from \"../src/components/Img\"\nimport imgsData from \"./imgs.json\"\n\n\nclass App extends React.Component {\n\n  state = {\n    imgs: [],\n    clicked: [],\n    count: 0\n  };\n  \n  componentDidMount(){\n    this.setState({ imgs: imgsData })\n  }\n\n  handleIncrement = (id) => {\n    if (this.state.clicked.includes(id)) { // User has clicked this image before\n      this.setState({ \n        count: 0,\n        imgs: this.shuffle(this.state.imgs),\n        clicked: []\n      });\n      \n    } else { // User hasn't clicked before\n      \n      this.setState({ \n        count: this.state.count + 1,\n        imgs: this.shuffle(this.state.imgs),\n        clicked: [...this.state.clicked,id]\n      }, ()=> console.log(this.state.count));\n      \n    }\n    \n  }\n\n  \n  \n  shuffle = (imgs) => {\n    for(let i = 0; i < imgs.length; i++){\n      const randNum = Math.floor(Math.random() * imgs.length)\n      const temp = imgs[i];\n      imgs[i] = imgs[randNum];\n      imgs[randNum] = temp;\n    }\n    return imgs;\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        {this.state.imgs.map(imgs => {\n         \n          return (\n            <Img\n              handleIncrement={this.handleIncrement}\n              key={imgs.id}\n              id={imgs.id}\n              name={imgs.name}\n              image={imgs.image}\n            />\n        )})}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}